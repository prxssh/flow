# Generated by Cargo
# will have compiled files and executables
/target/

# These are generated by `cargo test` and contain profiling data
# which is generally not needed in version control.
**/cov/
**/debug/
**/release/
**/build/

# Depending on your setup, you might find these helpful for specific tools:
# rust-analyzer generated files (for IDEs)
.rust-analyzer/

# VS Code specific files
.vscode/

# Project-specific temporary files
*.temp
*.tmp

# Operating System Files
.DS_Store # macOS
.env # Environment variables (should always be ignored for security)
.env.* # Other environment variable files

# Build artifacts for C/C++ dependencies (if using `cc` crate)
# These can appear if your Rust project links to C/C++ code.
*.o
*.so
*.lo
*.la
*.dll
*.lib
*.exp
*.ilk
*.pdb

# Dependencies generated by wasm-pack
# While wasm-pack typically creates a 'pkg' directory, sometimes
# intermediate files might show up. The `pkg` directory itself
# is usually handled by the main project's .gitignore (which
# then copies it into node_modules or directly into src/assets).
# However, if your wasm-pack build outputs directly into the Rust
# project root, you might need this.
/pkg/

# Wasm-bindgen cache
# wasm-pack often caches wasm-bindgen binaries here
.wasm-pack/
.cargo_home/

# Crash reports
# Generated by some tools or tests on crashes
crash-reports/

# IDE specific files
# Example for IntelliJ/CLion. Add others as needed.
.idea/

# Performance profiling data (e.g., perf, flamegraphs)
*.data
*.data.old
*.profraw
*.profdata
*.perf

# DWARF debug info (if not included in binaries)
# Usually placed in target/
*.dwo
*.elf
